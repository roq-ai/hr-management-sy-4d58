generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model artist {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  birth_date DateTime @db.Date
  genre      String   @db.VarChar(255)
  debut_year Int
  song_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  song       song     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model collection {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String       @db.VarChar(255)
  creation_date   DateTime     @db.Date
  last_updated    DateTime     @db.Date
  total_songs     Int
  organization_id String       @db.Uuid
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model mp3_player {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  model            String       @db.VarChar(255)
  manufacturer     String       @db.VarChar(255)
  storage_capacity Int
  battery_life     Int
  organization_id  String       @db.Uuid
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  organization     organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  song             song[]
}

model organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  collection  collection[]
  mp3_player  mp3_player[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model song {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String     @db.VarChar(255)
  duration      Int
  genre         String     @db.VarChar(255)
  release_date  DateTime   @db.Date
  mp3_player_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  artist        artist[]
  mp3_player    mp3_player @relation(fields: [mp3_player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  organization organization[]
}
